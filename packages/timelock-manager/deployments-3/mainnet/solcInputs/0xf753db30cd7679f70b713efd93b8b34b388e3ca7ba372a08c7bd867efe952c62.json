{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/ITimelockManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\n\ninterface ITimelockManager {\n    event Api3PoolUpdated(address api3PoolAddress);\n\n    event RevertedTimelock(\n        address indexed recipient,\n        address destination,\n        uint256 amount\n        );\n\n    event PermittedTimelockToBeReverted(address recipient);\n\n    event TransferredAndLocked(\n        address source,\n        address indexed recipient,\n        uint256 amount,\n        uint256 releaseStart,\n        uint256 releaseEnd\n        );\n\n    event Withdrawn(\n        address indexed recipient,\n        uint256 amount\n        );\n\n    event WithdrawnToPool(\n        address indexed recipient,\n        address api3PoolAddress,\n        address beneficiary\n        );\n\n    function updateApi3Pool(address api3PoolAddress)\n        external;\n\n    function revertTimelock(\n        address recipient,\n        address destination\n        )\n        external;\n\n    function permitTimelockToBeReverted()\n        external;\n\n    function transferAndLock(\n        address source,\n        address recipient,\n        uint256 amount,\n        uint256 releaseStart,\n        uint256 releaseEnd\n        )\n        external;\n\n    function transferAndLockMultiple(\n        address source,\n        address[] calldata recipients,\n        uint256[] calldata amounts,\n        uint256[] calldata releaseStarts,\n        uint256[] calldata releaseEnds\n        )\n        external;\n\n    function withdraw()\n        external;\n\n    function withdrawToPool(\n        address api3PoolAddress,\n        address beneficiary\n        )\n        external;\n\n    function getWithdrawable(address recipient)\n        external\n        view\n        returns(uint256 withdrawable);\n\n    function getTimelock(address recipient)\n        external\n        view\n        returns (\n            uint256 totalAmount,\n            uint256 remainingAmount,\n            uint256 releaseStart,\n            uint256 releaseEnd\n            );\n\n    function getRemainingAmount(address recipient)\n        external\n        view\n        returns (uint256 remainingAmount);\n\n    function getIfTimelockIsRevertible(address recipient)\n        external\n        view\n        returns (bool revertStatus);\n}\n"
    },
    "contracts/interfaces/ITimelockManagerReversible.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\ninterface ITimelockManagerReversible {\n\n    event StoppedVesting(\n        address recipient, \n        address destination, \n        uint256 amount\n    );\n\n    event TransferredAndLocked(\n        address source,\n        address indexed recipient,\n        uint256 amount,\n        uint256 releaseStart,\n        uint256 releaseEnd\n    );\n\n    event Withdrawn(\n        address indexed recipient, \n        uint256 amount\n    );\n\n    function stopVesting(\n        address recipient, \n        address destination\n    ) external;\n\n    function transferAndLock(\n        address source,\n        address recipient,\n        uint256 amount,\n        uint256 releaseStart,\n        uint256 releaseEnd\n    ) external;\n\n    function transferAndLockMultiple(\n        address source,\n        address[] calldata recipients,\n        uint256[] calldata amounts,\n        uint256[] calldata releaseStarts,\n        uint256[] calldata releaseEnds\n    ) external;\n\n    function withdraw() external;\n\n    function getWithdrawable(address recipient)\n        external\n        view\n        returns (\n            uint256 withdrawable\n        );\n\n    function getTimelock(address recipient)\n        external\n        view\n        returns (\n            uint256 totalAmount,\n            uint256 remainingAmount,\n            uint256 releaseStart,\n            uint256 releaseEnd\n        );\n\n    function getRemainingAmount(address recipient)\n        external\n        view\n        returns (\n            uint256 remainingAmount\n        );\n}\n"
    },
    "contracts/TimelockManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@api3-contracts/api3-token/contracts/interfaces/IApi3Token.sol\";\nimport \"@api3-contracts/api3-pool/contracts/interfaces/IApi3Pool.sol\";\nimport \"./interfaces/ITimelockManager.sol\";\n\n\n/// @title Contract that the API3 DAO uses to timelock API3 tokens\n/// @notice The owner of TimelockManager (i.e., API3 DAO) can send tokens to\n/// TimelockManager to timelock them. These tokens will then be vested to their\n/// recipient linearly, starting from releaseStart and ending at releaseEnd of\n/// the respective timelock.\n/// Alternatively, if the owner of TimelockManager (i.e., API3 DAO) sets the\n/// api3Pool address, the token recipients can transfer their locked tokens\n/// from TimelockManager to api3Pool. These tokens will remain timelocked\n/// (i.e., will not be withdrawable) at api3Pool until they are vested\n/// according to their respective schedule.\ncontract TimelockManager is Ownable, ITimelockManager {\n    using SafeMath for uint256;\n\n    /// @dev If an address has permitted the owner of this contract (i.e., the\n    /// API3 DAO) to revert (i.e., cancel and withdraw the tokens) their\n    /// timelock\n    mapping(address => bool) private permittedTimelockToBeReverted;\n\n    struct Timelock {\n        uint256 totalAmount;\n        uint256 remainingAmount;\n        uint256 releaseStart;\n        uint256 releaseEnd;\n        }\n\n    IApi3Token public immutable api3Token;\n    IApi3Pool public api3Pool;\n    mapping(address => Timelock) public timelocks;\n\n    /// @dev api3Pool is not initialized in the constructor because this\n    /// contract will be deployed before api3Pool\n    /// @param api3TokenAddress Address of the API3 token contract\n    /// @param timelockManagerOwner Address that will receive the ownership of\n    /// the TimelockManager contract (i.e., the API3 DAO)\n    constructor(\n        address api3TokenAddress,\n        address timelockManagerOwner\n        )\n        public\n    {\n        api3Token = IApi3Token(api3TokenAddress);\n        transferOwnership(timelockManagerOwner);\n    }\n\n    /// @notice Called by the owner (i.e., API3 DAO) to set the address of\n    /// api3Pool, which token recipients can transfer their tokens to\n    /// @param api3PoolAddress Address of the API3 pool contract\n    function updateApi3Pool(address api3PoolAddress)\n        external\n        override\n        onlyOwner\n    {\n        require(\n            address(api3Pool) != api3PoolAddress,\n            \"Input will not update state\"\n        );\n        api3Pool = IApi3Pool(api3PoolAddress);\n        emit Api3PoolUpdated(api3PoolAddress);\n    }\n\n    /// @notice Called by the owner (i.e., API3 DAO) to revert the timelock of\n    /// a recipient, given that they have given permission beforehand\n    /// @param recipient Original recipient of tokens\n    /// @param destination Destination of the tokens locked by the reverted\n    /// timelock\n    function revertTimelock(\n        address recipient,\n        address destination\n        )\n        external\n        override\n        onlyOwner\n        onlyIfRecipientHasRemainingTokens(recipient)\n    {\n        require(\n            destination != address(0),\n            \"Invalid destination\"\n            );\n        require(\n            permittedTimelockToBeReverted[recipient],\n            \"Not permitted to revert timelock\"\n            );\n        // Reset permission automatically\n        permittedTimelockToBeReverted[recipient] = false;\n        uint256 remaining = timelocks[recipient].remainingAmount;\n        timelocks[recipient].remainingAmount = 0;\n        require(\n            api3Token.transfer(destination, remaining),\n            \"API3 token transfer failed\"\n            );\n        emit RevertedTimelock(recipient, destination, remaining);\n    }\n\n    /// @notice Permit the owner (i.e., API3 DAO) to revert the caller's\n    /// timelock\n    /// @dev To be used when the timelock has been created with incorrect\n    /// parameters (for example with releaseEnd at infinity)\n    function permitTimelockToBeReverted()\n        external\n        override\n        onlyIfRecipientHasRemainingTokens(msg.sender)\n    {\n        require(\n            !permittedTimelockToBeReverted[msg.sender],\n            \"Input will not update state\"\n        );\n        permittedTimelockToBeReverted[msg.sender] = true;\n        emit PermittedTimelockToBeReverted(msg.sender);\n    }\n\n    /// @notice Transfers API3 tokens to this contract and timelocks them\n    /// @dev source needs to approve() this contract to transfer amount number\n    /// of tokens beforehand.\n    /// A recipient cannot have multiple timelocks.\n    /// @param source Source of tokens\n    /// @param recipient Recipient of tokens\n    /// @param amount Amount of tokens\n    /// @param releaseStart Start of release time\n    /// @param releaseEnd End of release time\n    function transferAndLock(\n        address source,\n        address recipient,\n        uint256 amount,\n        uint256 releaseStart,\n        uint256 releaseEnd\n        )\n        public\n        override\n        onlyOwner\n    {\n        require(\n            timelocks[recipient].remainingAmount == 0,\n            \"Recipient has remaining tokens\"\n            );\n        require(amount != 0, \"Amount cannot be 0\");\n        require(\n            releaseEnd > releaseStart,\n            \"releaseEnd not larger than releaseStart\"\n            );\n        require(\n            releaseStart > now,\n            \"releaseStart not in the future\"\n            );\n        timelocks[recipient] = Timelock({\n            totalAmount: amount,\n            remainingAmount: amount,\n            releaseStart: releaseStart,\n            releaseEnd: releaseEnd\n            });\n        require(\n            api3Token.transferFrom(source, address(this), amount),\n            \"API3 token transferFrom failed\"\n            );\n        emit TransferredAndLocked(\n            source,\n            recipient,\n            amount,\n            releaseStart,\n            releaseEnd\n            );\n    }\n\n    /// @notice Convenience function that calls transferAndLock() multiple times\n    /// @dev source is expected to be a single address, i.e., the API3 DAO.\n    /// source needs to approve() this contract to transfer the sum of the\n    /// amounts of tokens to be transferred and locked.\n    /// @param source Source of tokens\n    /// @param recipients Array of recipients of tokens\n    /// @param amounts Array of amounts of tokens\n    /// @param releaseStarts Array of starts of release times\n    /// @param releaseEnds Array of ends of release times\n    function transferAndLockMultiple(\n        address source,\n        address[] calldata recipients,\n        uint256[] calldata amounts,\n        uint256[] calldata releaseStarts,\n        uint256[] calldata releaseEnds\n        )\n        external\n        override\n        onlyOwner\n    {\n        require(\n            recipients.length == amounts.length\n                && recipients.length == releaseStarts.length\n                && recipients.length == releaseEnds.length,\n            \"Parameters are of unequal length\"\n            );\n        require(\n            recipients.length <= 30,\n            \"Parameters are longer than 30\"\n            );\n        for (uint256 ind = 0; ind < recipients.length; ind++)\n        {\n            transferAndLock(\n                source,\n                recipients[ind],\n                amounts[ind],\n                releaseStarts[ind],\n                releaseEnds[ind]\n                );\n        }\n    }\n\n    /// @notice Used by the recipient to withdraw tokens\n    function withdraw()\n        external\n        override\n        onlyIfRecipientHasRemainingTokens(msg.sender)\n    {\n        address recipient = msg.sender;\n        uint256 withdrawable = getWithdrawable(recipient);\n        require(\n            withdrawable != 0,\n            \"No withdrawable tokens yet\"\n            );\n        timelocks[recipient].remainingAmount = timelocks[recipient].remainingAmount.sub(withdrawable);\n        require(\n            api3Token.transfer(recipient, withdrawable),\n            \"API3 token transfer failed\"\n            );\n        emit Withdrawn(\n            recipient,\n            withdrawable\n            );\n    }\n\n    /// @notice Used by the recipient to withdraw their tokens to the API3 pool\n    /// @dev We ask the recipient to provide api3PoolAddress as a form of\n    /// validation, i.e., the recipient confirms that the API3 pool address set\n    /// at this contract is correct\n    /// @param api3PoolAddress Address of the API3 pool contract\n    /// @param beneficiary Address that the tokens will be deposited to the\n    /// pool contract on behalf of\n    function withdrawToPool(\n        address api3PoolAddress,\n        address beneficiary\n        )\n        external\n        override\n        onlyIfRecipientHasRemainingTokens(msg.sender)\n    {\n        require(\n            beneficiary != address(0),\n            \"beneficiary cannot be 0\"\n            );\n        require(address(api3Pool) != address(0), \"API3 pool not set yet\");\n        require(\n            address(api3Pool) == api3PoolAddress,\n            \"API3 pool addresses do not match\"\n            );\n        address recipient = msg.sender;\n        uint256 withdrawable = getWithdrawable(recipient);\n        uint256 remaining = timelocks[recipient].remainingAmount;\n        uint256 timelocked = remaining.sub(withdrawable);\n        timelocks[recipient].remainingAmount = 0;\n        // Approve the total amount\n        api3Token.approve(address(api3Pool), remaining);\n        // Deposit the funds that are withdrawable without vesting\n        if (withdrawable != 0)\n        {\n            api3Pool.deposit(\n                address(this),\n                withdrawable,\n                beneficiary\n                );\n        }\n        // Deposit the funds that are still timelocked with vesting.\n        // The vesting will continue the same way at the pool, released\n        // linearly.\n        if (timelocked != 0)\n        {\n            api3Pool.depositWithVesting(\n                address(this),\n                timelocked,\n                beneficiary,\n                now > timelocks[recipient].releaseStart ? now : timelocks[recipient].releaseStart,\n                timelocks[recipient].releaseEnd\n                );\n        }\n        emit WithdrawnToPool(\n            recipient,\n            api3PoolAddress,\n            beneficiary\n            );\n    }\n\n    /// @notice Returns the amount of tokens a recipient can currently withdraw\n    /// @param recipient Address of the recipient\n    /// @return withdrawable Amount of tokens withdrawable by the recipient\n    function getWithdrawable(address recipient)\n        public\n        view\n        override\n        returns(uint256 withdrawable)\n    {\n        Timelock storage timelock = timelocks[recipient];\n        uint256 unlocked = getUnlocked(recipient);\n        uint256 withdrawn = timelock.totalAmount.sub(timelock.remainingAmount);\n        withdrawable = unlocked.sub(withdrawn);\n    }\n\n    /// @notice Returns the amount of tokens that was unlocked for the\n    /// recipient to date. Includes both withdrawn and non-withdrawn tokens.\n    /// @param recipient Address of the recipient\n    /// @return unlocked Amount of tokens unlocked for the recipient\n    function getUnlocked(address recipient)\n        private\n        view\n        returns(uint256 unlocked)\n    {\n        Timelock storage timelock = timelocks[recipient];\n        if (now <= timelock.releaseStart)\n        {\n            unlocked = 0;\n        }\n        else if (now >= timelock.releaseEnd)\n        {\n            unlocked = timelock.totalAmount;\n        }\n        else\n        {\n            uint256 passedTime = now.sub(timelock.releaseStart);\n            uint256 totalTime = timelock.releaseEnd.sub(timelock.releaseStart);\n            unlocked = timelock.totalAmount.mul(passedTime).div(totalTime);\n        }\n    }\n\n    /// @notice Returns the details of a timelock\n    /// @param recipient Recipient of tokens\n    /// @return totalAmount Total amount of tokens\n    /// @return remainingAmount Remaining amount of tokens to be withdrawn\n    /// @return releaseStart Release start time\n    /// @return releaseEnd Release end time\n    function getTimelock(address recipient)\n        external\n        view\n        override\n        returns (\n            uint256 totalAmount,\n            uint256 remainingAmount,\n            uint256 releaseStart,\n            uint256 releaseEnd\n            )\n    {\n        Timelock storage timelock = timelocks[recipient];\n        totalAmount = timelock.totalAmount;\n        remainingAmount = timelock.remainingAmount;\n        releaseStart = timelock.releaseStart;\n        releaseEnd = timelock.releaseEnd;\n    }\n\n    /// @notice Returns remaining amount of a timelock\n    /// @dev Provided separately to be used with Etherscan's \"Read\"\n    /// functionality, in case getTimelock() output is too complicated for the\n    /// user.\n    /// @param recipient Recipient of tokens\n    /// @return remainingAmount Remaining amount of tokens to be withdrawn\n    function getRemainingAmount(address recipient)\n        external\n        view\n        override\n        returns (uint256 remainingAmount)\n    {\n        remainingAmount = timelocks[recipient].remainingAmount;\n    }\n\n    /// @notice Returns if the recipient's timelock is revertible\n    /// @param recipient Recipient of tokens\n    /// @return revertStatus If the recipient's timelock is revertible\n    function getIfTimelockIsRevertible(address recipient)\n        external\n        view\n        override\n        returns (bool revertStatus)\n    {\n        revertStatus = permittedTimelockToBeReverted[recipient];\n    }\n\n    /// @dev Reverts if the recipient does not have remaining tokens\n    modifier onlyIfRecipientHasRemainingTokens(address recipient)\n    {\n        require(\n            timelocks[recipient].remainingAmount != 0,\n            \"Recipient does not have remaining tokens\"\n            );\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@api3-contracts/api3-token/contracts/interfaces/IApi3Token.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\ninterface IApi3Token is IERC20 {\n    event MinterStatusUpdated(\n        address indexed minterAddress,\n        bool minterStatus\n        );\n\n    event BurnerStatusUpdated(\n        address indexed burnerAddress,\n        bool burnerStatus\n        );\n\n    function updateMinterStatus(\n        address minterAddress,\n        bool minterStatus\n        )\n        external;\n\n    function updateBurnerStatus(bool burnerStatus)\n        external;\n\n    function mint(\n        address account,\n        uint256 amount\n        )\n        external;\n\n    function burn(uint256 amount)\n        external;\n\n    function getMinterStatus(address minterAddress)\n        external\n        view\n        returns(bool minterStatus);\n\n    function getBurnerStatus(address burnerAddress)\n        external\n        view\n        returns(bool burnerStatus);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IApi3Pool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./ITransferUtils.sol\";\n\n\ninterface IApi3Pool is ITransferUtils {}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/ITransferUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IPoolUtils.sol\";\n\n\ninterface ITransferUtils is IPoolUtils {\n    event Deposited(\n        address indexed sourceAddress,\n        uint256 amount,\n        address indexed userAddress\n        );\n    \n    event DepositedWithVesting(\n        address indexed sourceAddress,\n        uint256 amount,\n        address indexed userAddress,\n        uint256 vestingEpoch\n        );\n    \n    event Withdrawn(\n        address indexed userAddress,\n        address destinationAddress,\n        uint256 amount\n        );\n    \n    event AddedVestedRewards(\n        address indexed sourceAddress,\n        uint256 amount,\n        uint256 indexed epochIndex\n        );\n    \n    event AddedInstantRewards(\n        address indexed sourceAddress,\n        uint256 amount,\n        uint256 indexed epochIndex\n        );\n\n    function deposit(\n        address sourceAddress,\n        uint256 amount,\n        address userAddress\n        )\n        external;\n\n    function depositWithVesting(\n        address sourceAddress,\n        uint256 amount,\n        address userAddress,\n        uint256 vestingStart,\n        uint256 vestingEnd\n        )\n        external;\n\n    function withdraw(\n        address destinationAddress,\n        uint256 amount\n        )\n        external;\n\n    function addVestedRewards(\n        address sourceAddress,\n        uint256 amount\n        )\n        external;\n\n    function addInstantRewards(\n        address sourceAddress,\n        uint256 amount\n        )\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IPoolUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IStakeUtils.sol\";\n\n\ninterface IPoolUtils is IStakeUtils {\n    event Pooled(\n        address indexed userAddress,\n        uint256 amount,\n        uint256 amountInShares\n        );\n    \n    event RequestedToUnpool(address indexed userAddress);\n\n    event Unpooled(\n        address indexed userAddress,\n        uint256 amount,\n        uint256 amountInShares\n    );\n\n    function pool(uint256 amount)\n        external;\n\n    function requestToUnpool()\n        external;\n\n    function unpool(uint256 amountInShares)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IStakeUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IVestingUtils.sol\";\n\n\ninterface IStakeUtils is IVestingUtils {\n    event Staked(\n        address indexed userAddress,\n        uint256 amountInShares\n        );\n    \n    event UpdatedDelegate(\n        address indexed userAddress,\n        address indexed delegate\n        );\n\n    event Collected(\n        address indexed userAddress,\n        uint256 vestedRewards,\n        uint256 instantRewards\n        );\n\n    function stake(address userAddress)\n        external;\n\n    function updateDelegate(address delegate)\n        external;\n\n    function collect(address userAddress)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IVestingUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IIouUtils.sol\";\n\n\ninterface IVestingUtils is IIouUtils {\n    event VestingCreated(\n        bytes32 indexed vestingId,\n        address indexed userAddress,\n        uint256 amount,\n        uint256 vestingEpoch\n        );\n\n    event VestingResolved(bytes32 indexed vestingId);\n\n    function vest(bytes32 vestingId)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IIouUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IApi3State.sol\";\nimport \"./IClaimUtils.sol\";\n\n\ninterface IIouUtils is IClaimUtils {\n    event IouCreated(\n        bytes32 indexed iouId,\n        address indexed userAddress,\n        uint256 amountInShares,\n        bytes32 indexed claimId,\n        IApi3State.ClaimStatus redemptionCondition\n        );\n\n    event IouRedeemed(bytes32 indexed iouId, uint256 amount);\n\n    event IouDeleted(bytes32 indexed iouId);\n\n    function redeem(bytes32 iouId)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IApi3State.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\ninterface IApi3State {\n    enum ClaimStatus { Pending, Accepted, Denied }\n\n    event InflationManagerUpdated(address inflationManagerAddress);\n    event ClaimsManagerUpdated(address claimsManagerAddress);\n    event RewardVestingPeriodUpdated(uint256 rewardVestingPeriod);\n    event UnpoolRequestCooldownUpdated(uint256 unpoolRequestCooldown);\n    event UnpoolWaitingPeriodUpdated(uint256 unpoolWaitingPeriod);\n\n    function updateInflationManager(address inflationManagerAddress)\n        external;\n\n    function updateClaimsManager(address claimsManagerAddress)\n        external;\n\n    function updateRewardVestingPeriod(uint256 _rewardVestingPeriod)\n        external;\n\n    function updateUnpoolRequestCooldown(uint256 _unpoolRequestCooldown)\n        external;\n\n    function updateUnpoolWaitingPeriod(uint256 _unpoolWaitingPeriod)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IClaimUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IGetterUtils.sol\";\n\n\ninterface IClaimUtils is IGetterUtils {\n    event ClaimCreated(\n        bytes32 indexed claimId,\n        address indexed beneficiary,\n        uint256 amount\n        );\n\n    event ClaimAccepted(bytes32 indexed claimId);\n\n    event ClaimDenied(bytes32 indexed claimId);\n\n    function createClaim(\n        address beneficiary,\n        uint256 amount\n        )\n        external;\n\n    function acceptClaim(bytes32 claimId)\n        external;\n\n    function denyClaim(bytes32 claimId)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IGetterUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IEpochUtils.sol\";\n\n\ninterface IGetterUtils is IEpochUtils {\n    function getPooled(address userAddress)\n        external\n        view\n        returns(uint256 pooled);\n\n    function getVotingPower(\n        address delegate,\n        uint256 timestamp\n        )\n        external\n        view\n        returns(uint256 votingPower);\n\n    function getTotalRealPooled()\n        external\n        view\n        returns(uint256 totalRealPooled);\n\n    function getBalance(address userAddress)\n        external\n        view\n        returns(uint256 balance);\n\n    function getShare(address userAddress)\n        external\n        view\n        returns(uint256 share);\n\n    function getUnpoolRequestEpoch(address userAddress)\n        external\n        view\n        returns(uint256 unpoolRequestEpoch);\n\n    function getTotalStaked(uint256 epochIndex)\n        external\n        view\n        returns(uint256 totalStaked);\n\n    function getStaked(\n        address userAddress,\n        uint256 epochIndex\n        )\n        external\n        view\n        returns(uint256 staked);\n\n    function getDelegate(address userAddress)\n        external\n        view\n        returns(address delegate);\n\n    function getDelegated(\n        address delegate,\n        uint256 epochIndex\n        )\n        external\n        view\n        returns(uint256 delegated);\n\n    function getVestedRewards(uint256 epochIndex)\n        external\n        view\n        returns(uint256 vestedRewards);\n\n    function getUnpaidVestedRewards(uint256 epochIndex)\n        external\n        view\n        returns(uint256 unpaidVestedRewards);\n\n    function getInstantRewards(uint256 epochIndex)\n        external\n        view\n        returns(uint256 instantRewards);\n\n    function getUnpaidInstantRewards(uint256 epochIndex)\n        external\n        view\n        returns(uint256 unpaidInstantRewards);\n\n    function getVesting(bytes32 vestingId)\n        external\n        view\n        returns(\n            address userAddress,\n            uint256 amount,\n            uint256 epoch\n            );\n\n    function getUnvestedFund(address userAddress)\n        external\n        view\n        returns(uint256 unvestedFund);\n\n    function getClaim(bytes32 claimId)\n        external\n        view\n        returns(\n            address beneficiary,\n            uint256 amount,\n            IApi3State.ClaimStatus status\n            );\n\n    function getActiveClaims()\n        external\n        view\n        returns(bytes32[] memory _activeClaims);\n\n    function getIou(bytes32 iouId)\n        external\n        view\n        returns(\n            address userAddress,\n            uint256 amountInShares,\n            bytes32 claimId,\n            IApi3State.ClaimStatus redemptionCondition\n            );\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IEpochUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IApi3State.sol\";\n\n\ninterface IEpochUtils is IApi3State {\n    function getCurrentEpochIndex()\n        external\n        view\n        returns(uint256 currentEpochIndex);\n\n    function getEpochIndex(uint256 timestamp)\n        external\n        view\n        returns(uint256 epochIndex);\n}\n"
    },
    "contracts/TimeLockManagerReversible.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@api3-contracts/api3-token/contracts/interfaces/IApi3Token.sol\";\nimport \"./interfaces/ITimelockManagerReversible.sol\";\n\n/// @title Contract that the TimeLockManager Contract Owner uses to timelock API3 tokens\n/// @notice The owner of TimelockManager can send tokens to\n/// TimelockManager to timelock them. These tokens will then be vested to their\n/// recipient linearly, starting from releaseStart and ending at releaseEnd of\n/// the respective timelock.\n\ncontract TimelockManagerReversible is Ownable, ITimelockManagerReversible {\n    using SafeMath for uint256;\n\n    struct Timelock {\n        uint256 totalAmount;\n        uint256 remainingAmount;\n        uint256 releaseStart;\n        uint256 releaseEnd;\n    }\n\n    IApi3Token public immutable api3Token;\n    mapping(address => Timelock) public timelocks;\n\n    /// @param api3TokenAddress Address of the API3 token contract\n    /// @param timelockManagerOwner Address that will receive the ownership of\n    /// the TimelockManager contract\n    constructor(\n        address api3TokenAddress, \n        address timelockManagerOwner\n        ) \n        public \n    {\n        api3Token = IApi3Token(api3TokenAddress);\n        transferOwnership(timelockManagerOwner);\n    }\n\n    /// @notice Called by the ContractOwner to stop the vesting of\n    /// a recipient\n    /// @param recipient Original recipient of tokens\n    /// @param destination Destination of the excess tokens vested to the addresss\n    function stopVesting(\n        address recipient, \n        address destination\n        )\n        external\n        override\n        onlyOwner\n        onlyIfRecipientHasRemainingTokens(recipient)\n    {\n        uint256 withdrawable = getWithdrawable(recipient);\n        uint256 reclaimedTokens =\n            timelocks[recipient].remainingAmount.sub(withdrawable);\n        timelocks[recipient].remainingAmount = withdrawable;\n        timelocks[recipient].releaseEnd = now;\n        require(\n            api3Token.transfer(destination, reclaimedTokens),\n            \"API3 token transfer failed\"\n        );\n        emit StoppedVesting(recipient, destination, reclaimedTokens);\n    }\n\n    /// @notice Transfers API3 tokens to this contract and timelocks them\n    /// @dev source needs to approve() this contract to transfer amount number\n    /// of tokens beforehand.\n    /// A recipient cannot have multiple timelocks.\n    /// @param source Source of tokens\n    /// @param recipient Recipient of tokens\n    /// @param amount Amount of tokens\n    /// @param releaseStart Start of release time\n    /// @param releaseEnd End of release time\n    function transferAndLock(\n        address source,\n        address recipient,\n        uint256 amount,\n        uint256 releaseStart,\n        uint256 releaseEnd\n        ) \n        public \n        override \n        onlyOwner\n    {\n        require(\n            timelocks[recipient].remainingAmount == 0,\n            \"Recipient has remaining tokens\"\n        );\n        require(amount != 0, \"Amount cannot be 0\");\n        require(\n            releaseEnd > releaseStart,\n            \"releaseEnd not larger than releaseStart\"\n        );\n        timelocks[recipient] = Timelock({\n            totalAmount: amount,\n            remainingAmount: amount,\n            releaseStart: releaseStart,\n            releaseEnd: releaseEnd\n        });\n        require(\n            api3Token.transferFrom(source, address(this), amount),\n            \"API3 token transferFrom failed\"\n        );\n        emit TransferredAndLocked(\n            source,\n            recipient,\n            amount,\n            releaseStart,\n            releaseEnd\n        );\n    }\n\n    /// @notice Convenience function that calls transferAndLock() multiple times\n    /// @dev source is expected to be a single address.\n    /// source needs to approve() this contract to transfer the sum of the\n    /// amounts of tokens to be transferred and locked.\n    /// @param source Source of tokens\n    /// @param recipients Array of recipients of tokens\n    /// @param amounts Array of amounts of tokens\n    /// @param releaseStarts Array of starts of release times\n    /// @param releaseEnds Array of ends of release times\n    function transferAndLockMultiple(\n        address source,\n        address[] calldata recipients,\n        uint256[] calldata amounts,\n        uint256[] calldata releaseStarts,\n        uint256[] calldata releaseEnds\n        ) \n        external \n        override \n        onlyOwner \n    {\n        require(\n            recipients.length == amounts.length &&\n                recipients.length == releaseStarts.length &&\n                recipients.length == releaseEnds.length,\n            \"Parameters are of unequal length\"\n        );\n        require(recipients.length <= 30, \"Parameters are longer than 30\");\n        for (uint256 ind = 0; ind < recipients.length; ind++) {\n            transferAndLock(\n                source,\n                recipients[ind],\n                amounts[ind],\n                releaseStarts[ind],\n                releaseEnds[ind]\n            );\n        }\n    }\n\n    /// @notice Used by the recipient to withdraw tokens\n    function withdraw()\n        external\n        override\n        onlyIfRecipientHasRemainingTokens(msg.sender)\n    {\n        address recipient = msg.sender;\n        uint256 withdrawable = getWithdrawable(recipient);\n        require(withdrawable != 0, \"No withdrawable tokens yet\");\n        timelocks[recipient].remainingAmount = timelocks[recipient]\n            .remainingAmount\n            .sub(withdrawable);\n        require(\n            api3Token.transfer(recipient, withdrawable),\n            \"API3 token transfer failed\"\n        );\n        emit Withdrawn(recipient, withdrawable);\n    }\n\n    /// @notice Returns the amount of tokens a recipient can currently withdraw\n    /// @param recipient Address of the recipient\n    /// @return withdrawable Amount of tokens withdrawable by the recipient\n    function getWithdrawable(address recipient)\n        public\n        view\n        override\n        returns (uint256 withdrawable)\n    {\n        Timelock storage timelock = timelocks[recipient];\n        uint256 unlocked = getUnlocked(recipient);\n        uint256 withdrawn = timelock.totalAmount.sub(timelock.remainingAmount);\n        withdrawable = unlocked.sub(withdrawn);\n    }\n\n    /// @notice Returns the amount of tokens that was unlocked for the\n    /// recipient to date. Includes both withdrawn and non-withdrawn tokens.\n    /// @param recipient Address of the recipient\n    /// @return unlocked Amount of tokens unlocked for the recipient\n    function getUnlocked(address recipient)\n        private\n        view\n        returns (uint256 unlocked)\n    {\n        Timelock storage timelock = timelocks[recipient];\n        if (now <= timelock.releaseStart) {\n            unlocked = 0;\n        } else if (now >= timelock.releaseEnd) {\n            unlocked = timelock.totalAmount;\n        } else {\n            uint256 passedTime = now.sub(timelock.releaseStart);\n            uint256 totalTime = timelock.releaseEnd.sub(timelock.releaseStart);\n            unlocked = timelock.totalAmount.mul(passedTime).div(totalTime);\n        }\n    }\n\n    /// @notice Returns the details of a timelock\n    /// @param recipient Recipient of tokens\n    /// @return totalAmount Total amount of tokens\n    /// @return remainingAmount Remaining amount of tokens to be withdrawn\n    /// @return releaseStart Release start time\n    /// @return releaseEnd Release end time\n    function getTimelock(address recipient)\n        external\n        view\n        override\n        returns (\n            uint256 totalAmount,\n            uint256 remainingAmount,\n            uint256 releaseStart,\n            uint256 releaseEnd\n        )\n    {\n        Timelock storage timelock = timelocks[recipient];\n        totalAmount = timelock.totalAmount;\n        remainingAmount = timelock.remainingAmount;\n        releaseStart = timelock.releaseStart;\n        releaseEnd = timelock.releaseEnd;\n    }\n\n    /// @notice Returns remaining amount of a timelock\n    /// @dev Provided separately to be used with Etherscan's \"Read\"\n    /// functionality, in case getTimelock() output is too complicated for the\n    /// user.\n    /// @param recipient Recipient of tokens\n    /// @return remainingAmount Remaining amount of tokens to be withdrawn\n    function getRemainingAmount(address recipient)\n        external\n        view\n        override\n        returns (uint256 remainingAmount)\n    {\n        remainingAmount = timelocks[recipient].remainingAmount;\n    }\n\n    /// @dev Reverts if the recipient does not have remaining tokens\n    modifier onlyIfRecipientHasRemainingTokens(address recipient) {\n        require(\n            timelocks[recipient].remainingAmount != 0,\n            \"Recipient does not have remaining tokens\"\n        );\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": false
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}